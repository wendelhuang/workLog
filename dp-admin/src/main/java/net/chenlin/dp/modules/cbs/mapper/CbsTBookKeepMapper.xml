<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="net.chenlin.dp.modules.cbs.dao.CbsTBookKeepMapper">
	
	<select id="listForPage" resultType="CbsTBookKeepEntity" flushCache="true">
		SELECT
			`ID`, 
			`BOOK_ID`, 
			`UID`, 
			`KEEP_TIME`, 
			`MONEY`, 
			`TYPE_ID`, 
			`OUT_IN`, 
			`REMARK`, 
			`CREATE_TIME`, 
			`UPDATE_TIME`
		FROM
			CBS_T_BOOK_KEEP
		ORDER BY
			ID DESC
	</select>
	
	<insert id="save">
		INSERT INTO CBS_T_BOOK_KEEP (
			`BOOK_ID`, 
			`UID`, 
			`KEEP_TIME`, 
			`MONEY`, 
			`TYPE_ID`, 
			`OUT_IN`, 
			`REMARK`, 
			`CREATE_TIME`, 
			`UPDATE_TIME`
		)
		VALUES (
			#{bookId}, 
			#{uid}, 
			#{keepTime}, 
			#{money}, 
			#{typeId}, 
			#{outIn}, 
			#{remark}, 
			#{createTime}, 
			#{updateTime}
		)
	</insert>
	
	<select id="getObjectById" resultType="CbsTBookKeepEntity">
		SELECT
			`ID`, 
			`BOOK_ID`, 
			`UID`, 
			`KEEP_TIME`, 
			`MONEY`, 
			`TYPE_ID`, 
			`OUT_IN`, 
			`REMARK`, 
			`CREATE_TIME`, 
			`UPDATE_TIME`
		FROM
			CBS_T_BOOK_KEEP
		WHERE
			ID = #{id}
	</select>
	
	<update id="update">
		UPDATE CBS_T_BOOK_KEEP
	 	<set>
			<if test="bookId != null">`BOOK_ID` = #{bookId}, </if>
			<if test="uid != null">`UID` = #{uid}, </if>
			<if test="keepTime != null">`KEEP_TIME` = #{keepTime}, </if>
			<if test="money != null">`MONEY` = #{money}, </if>
			<if test="typeId != null">`TYPE_ID` = #{typeId}, </if>
			<if test="outIn != null">`OUT_IN` = #{outIn}, </if>
			<if test="remark != null">`REMARK` = #{remark}, </if>
			<if test="createTime != null">`CREATE_TIME` = #{createTime}, </if>
			<if test="updateTime != null">`UPDATE_TIME` = #{updateTime}</if>
		</set>
		WHERE
			ID = #{id}
	</update>
	
	<delete id="batchRemove">
		DELETE
		FROM
			CBS_T_BOOK_KEEP
		WHERE
			ID IN
		<foreach item="id" collection="array" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

	<select id="listUserForPage" resultType="CbsTBookKeepEntity" flushCache="true">
		SELECT
			`ID`,
			`BOOK_ID`,
			`UID`,
			`KEEP_TIME`,
			`MONEY`,
			`TYPE_ID`,
			`OUT_IN`,
			`REMARK`,
			`CREATE_TIME`,
			`UPDATE_TIME`
		FROM
			CBS_T_BOOK_KEEP
		WHERE
			UID = #{userId}
		ORDER BY
			KEEP_TIME DESC
	</select>


	<select id="listReportBalance" resultType="java.util.HashMap">
		select n.DTE, n.OUT_IN, n.C, n.S, sum(m.S) as SS from
		(
		select keep3.DTE, ifnull(keep3.OUT_IN, #{outIn}) as OUT_IN, ifnull(keep3.C, 0) as C , ifnull(keep3.S, 0) as S from
		(
		select calen.DATE_FMT_10 as DTE, keep2.OUT_IN,  keep2.C, keep2.S from
		(select DATE_FMT_10 from CBS_T_CALEN_DATE where DATE_FMT_10 >= #{startDate} and DATE_FMT_10 &lt;= #{endDate} ) calen left join
		( select DTE, OUT_IN, count(*) as C, SUM(MONEY) as S from
		(select date_format(keep_time, '%Y-%m-%d') as DTE, OUT_IN, MONEY from  CBS_T_BOOK_KEEP  where uid = 1 and OUT_IN = #{outIn}
		and date_format(keep_time, '%Y-%m-%d') >= #{startDate} and date_format(keep_time, '%Y-%m-%d') &lt;= #{endDate} ) keep group by keep.DTE ) keep2 on calen.DATE_FMT_10 = keep2.DTE
		) keep3
		) m,
		(
		select keep3.DTE, ifnull(keep3.OUT_IN, #{outIn}) as OUT_IN, ifnull(keep3.C, 0) as C , ifnull(keep3.S, 0) as S from
		(
		select calen.DATE_FMT_10 as DTE, keep2.OUT_IN,  keep2.C, keep2.S from
		(select DATE_FMT_10 from CBS_T_CALEN_DATE where DATE_FMT_10 >= #{startDate} and DATE_FMT_10 &lt;= #{endDate} ) calen left join
		( select DTE, OUT_IN, count(*) as C, SUM(MONEY) as S from
		(select date_format(keep_time, '%Y-%m-%d') as DTE, OUT_IN, MONEY from  CBS_T_BOOK_KEEP  where uid = 1 and OUT_IN = #{outIn}
		and date_format(keep_time, '%Y-%m-%d') >= #{startDate} and date_format(keep_time, '%Y-%m-%d') &lt;= #{endDate} ) keep group by keep.DTE ) keep2 on calen.DATE_FMT_10 = keep2.DTE
		) keep3
		) n where m.DTE &lt;= n.DTE group by n.DTE, n.OUT_IN, n.C, n.S order by n.DTE

	</select>

	<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>

</mapper>